/*
 * This file was automatically generated by EvoSuite
 * Updated 2/26/17
 * Updated 3/6/17: insertBefore/insertAfter can NOT insert new node if list is emptied.
 * Author: Doan Nguyen, update EvoSuite machine generated test cases.
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;

public class LinkedListTest2 {

  //Test case number: 0
  /*
   * 87 covered goals:
   * Goal 1. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 3. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 4. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 5. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 6. LinkedList.<init>()V: root-Branch
   * Goal 7. LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch
   * Goal 8. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 9. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 10. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 11. Branch LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch in context: LinkedList:insertAfter(Ljava/lang/Object;)V
   * Goal 12. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 13. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 14. [Output]: LinkedList.removeFirst()Ljava/lang/Object;:Null
   * Goal 15. LinkedList.<init>()V: Line 23
   * Goal 16. LinkedList.<init>()V: Line 24
   * Goal 17. LinkedList.<init>()V: Line 25
   * Goal 18. LinkedList.<init>()V: Line 29
   * Goal 19. LinkedList.<init>()V: Line 30
   * Goal 20. LinkedList.<init>()V: Line 31
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 28. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 100
   * Goal 29. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 101
   * Goal 30. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 102
   * Goal 31. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 103
   * Goal 32. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 33. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 34. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 35. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 36. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 37. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 38. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 39. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 40. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 41. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 43. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 44. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 45. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 46. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 15
   * Goal 47. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 48. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 49. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 50. [METHOD] LinkedList.<init>()V
   * Goal 51. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 52. [METHOD] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 53. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 54. [METHODNOEX] LinkedList.<init>()V
   * Goal 55. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 56. [METHODNOEX] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 57. [METHODNOEX] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 58. Weak Mutation 0: LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V:15 - ReplaceVariable n -> this
   * Goal 59. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 60. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 63. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 64. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 65. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 66. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 67. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 68. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 69. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 70. Weak Mutation 40: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 41: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp +1
   * Goal 72. Weak Mutation 42: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp -1
   * Goal 73. Weak Mutation 43: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceConstant - 1 -> 0
   * Goal 74. Weak Mutation 44: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> %
   * Goal 75. Weak Mutation 45: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> -
   * Goal 76. Weak Mutation 46: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> *
   * Goal 77. Weak Mutation 47: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> /
   * Goal 78. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 79. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 80. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 81. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 82. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 83. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 84. Weak Mutation 57: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> %
   * Goal 85. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 86. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 87. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   */

  
  @Test public void test00()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.addFirst((Object) null);
      linkedList0.insertAfter(object0);
      linkedList0.removeFirst();
      assertEquals(1, linkedList0.size());
  }

  //Test case number: 1
  /*
   * 99 covered goals:
   * Goal 1. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch
   * Goal 7. LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false
   * Goal 8. LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - true
   * Goal 9. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 10. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 11. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 12. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false
   * Goal 13. LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - true
   * Goal 14. LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - false
   * Goal 15. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 16. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 17. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 18. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - false in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 19. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 20. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 21. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 22. LinkedList.<init>()V: Line 23
   * Goal 23. LinkedList.<init>()V: Line 24
   * Goal 24. LinkedList.<init>()V: Line 25
   * Goal 25. LinkedList.<init>()V: Line 29
   * Goal 26. LinkedList.<init>()V: Line 30
   * Goal 27. LinkedList.<init>()V: Line 31
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 32. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 33. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 35. LinkedList.backward()V: Line 42
   * Goal 36. LinkedList.backward()V: Line 43
   * Goal 37. LinkedList.backward()V: Line 44
   * Goal 38. LinkedList.backward()V: Line 47
   * Goal 39. LinkedList.backward()V: Line 49
   * Goal 40. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 100
   * Goal 41. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 101
   * Goal 42. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 102
   * Goal 43. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 103
   * Goal 44. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 45. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 46. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 92
   * Goal 47. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 93
   * Goal 48. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 94
   * Goal 49. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 50. LinkedList.isEmpty()Z: Line 192
   * Goal 51. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 52. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 53. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 54. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 55. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 56. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 57. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 58. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 15
   * Goal 59. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 60. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 61. [METHOD] LinkedList.<init>()V
   * Goal 62. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 63. [METHODNOEX] LinkedList.<init>()V
   * Goal 64. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 65. Weak Mutation 0: LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V:15 - ReplaceVariable n -> this
   * Goal 66. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 67. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 5: LinkedList.backward()V:42 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 6: LinkedList.backward()V:44 - ReplaceComparisonOperator == -> !=
   * Goal 70. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 71. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 73. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 74. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 75. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 76. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 77. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 78. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 79. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 80. Weak Mutation 31: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 81. Weak Mutation 32: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - InsertUnaryOp Negation
   * Goal 82. Weak Mutation 33: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - InsertUnaryOp +1
   * Goal 83. Weak Mutation 34: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - InsertUnaryOp -1
   * Goal 84. Weak Mutation 35: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - ReplaceConstant - 1 -> 0
   * Goal 85. Weak Mutation 36: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - ReplaceArithmeticOperator + -> %
   * Goal 86. Weak Mutation 37: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - ReplaceArithmeticOperator + -> -
   * Goal 87. Weak Mutation 38: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - ReplaceArithmeticOperator + -> *
   * Goal 88. Weak Mutation 39: LinkedList.insertBefore(Ljava/lang/Object;)V:94 - ReplaceArithmeticOperator + -> /
   * Goal 89. Weak Mutation 40: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp Negation
   * Goal 90. Weak Mutation 41: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp +1
   * Goal 91. Weak Mutation 42: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp -1
   * Goal 92. Weak Mutation 43: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceConstant - 1 -> 0
   * Goal 93. Weak Mutation 44: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> %
   * Goal 94. Weak Mutation 45: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> -
   * Goal 95. Weak Mutation 46: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> *
   * Goal 96. Weak Mutation 47: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> /
   * Goal 97. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 98. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   * Goal 99. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test01()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.insertBefore(linkedList0);
      linkedList0.insertBefore(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 2
  /*
   * 60 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList.<init>()V: root-Branch
   * Goal 4. LinkedList.size()I: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 6. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 7. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 8. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 9. Branch LinkedList.size()I: root-Branch in context: LinkedList:size()I
   * Goal 10. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 11. [Output]: LinkedList.size()I:Positive
   * Goal 12. LinkedList.<init>()V: Line 23
   * Goal 13. LinkedList.<init>()V: Line 24
   * Goal 14. LinkedList.<init>()V: Line 25
   * Goal 15. LinkedList.<init>()V: Line 29
   * Goal 16. LinkedList.<init>()V: Line 30
   * Goal 17. LinkedList.<init>()V: Line 31
   * Goal 18. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 25. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 26. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 27. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 28. LinkedList.isEmpty()Z: Line 192
   * Goal 29. LinkedList.size()I: Line 187
   * Goal 30. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 31. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 32. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 33. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 34. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 35. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 36. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 37. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 38. [METHOD] LinkedList.<init>()V
   * Goal 39. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 40. [METHOD] LinkedList.size()I
   * Goal 41. [METHODNOEX] LinkedList.<init>()V
   * Goal 42. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 43. [METHODNOEX] LinkedList.size()I
   * Goal 44. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 45. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 47. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 49. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 50. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 52. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 53. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 54. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 55. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 56. Weak Mutation 111: LinkedList.size()I:187 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 112: LinkedList.size()I:187 - InsertUnaryOp +1
   * Goal 58. Weak Mutation 113: LinkedList.size()I:187 - InsertUnaryOp -1
   * Goal 59. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test02()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.insertBefore(object0);
      int int0 = linkedList0.size();
      assertEquals(0, int0);
  }

  //Test case number: 3
  /*
   * 50 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList.getFirst()Ljava/lang/Object;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 8. Branch LinkedList.getFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:getFirst()Ljava/lang/Object;
   * Goal 9. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 10. [Output]: LinkedList.getFirst()Ljava/lang/Object;:Null
   * Goal 11. LinkedList.<init>()V: Line 23
   * Goal 12. LinkedList.<init>()V: Line 24
   * Goal 13. LinkedList.<init>()V: Line 25
   * Goal 14. LinkedList.<init>()V: Line 29
   * Goal 15. LinkedList.<init>()V: Line 30
   * Goal 16. LinkedList.<init>()V: Line 31
   * Goal 17. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 18. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 24. LinkedList.getFirst()Ljava/lang/Object;: Line 107
   * Goal 25. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 26. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 27. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 28. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 29. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 30. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 31. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 32. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 33. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 34. [METHOD] LinkedList.<init>()V
   * Goal 35. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 36. [METHOD] LinkedList.getFirst()Ljava/lang/Object;
   * Goal 37. [METHODNOEX] LinkedList.<init>()V
   * Goal 38. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 39. [METHODNOEX] LinkedList.getFirst()Ljava/lang/Object;
   * Goal 40. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 41. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 45. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 46. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 48. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 49. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 50. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   */

  
  @Test public void test03()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      linkedList0.getFirst();
      assertEquals(1, linkedList0.size());
  }

  //Test case number: 4
  /*
   * 59 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList.getFirst()Ljava/lang/Object;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 8. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 9. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 10. Branch LinkedList.getFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:getFirst()Ljava/lang/Object;
   * Goal 11. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 12. [Output]: LinkedList.getFirst()Ljava/lang/Object;:NonNull
   * Goal 13. LinkedList.<init>()V: Line 23
   * Goal 14. LinkedList.<init>()V: Line 24
   * Goal 15. LinkedList.<init>()V: Line 25
   * Goal 16. LinkedList.<init>()V: Line 29
   * Goal 17. LinkedList.<init>()V: Line 30
   * Goal 18. LinkedList.<init>()V: Line 31
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 26. LinkedList.getFirst()Ljava/lang/Object;: Line 107
   * Goal 27. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 28. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 29. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 30. LinkedList.isEmpty()Z: Line 192
   * Goal 31. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 32. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 33. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 34. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 35. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 36. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 37. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 38. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 39. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 40. [METHOD] LinkedList.<init>()V
   * Goal 41. [METHOD] LinkedList.getFirst()Ljava/lang/Object;
   * Goal 42. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 43. [METHODNOEX] LinkedList.<init>()V
   * Goal 44. [METHODNOEX] LinkedList.getFirst()Ljava/lang/Object;
   * Goal 45. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 46. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 47. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 49. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 53. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 54. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 55. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 56. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 58. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test04()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.insertBefore(object0);
      linkedList0.getFirst();
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 5
  /*
   * 50 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList.currentData()Ljava/lang/Object;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. Branch LinkedList.currentData()Ljava/lang/Object;: root-Branch in context: LinkedList:currentData()Ljava/lang/Object;
   * Goal 8. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 9. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 10. [Output]: LinkedList.currentData()Ljava/lang/Object;:Null
   * Goal 11. LinkedList.<init>()V: Line 23
   * Goal 12. LinkedList.<init>()V: Line 24
   * Goal 13. LinkedList.<init>()V: Line 25
   * Goal 14. LinkedList.<init>()V: Line 29
   * Goal 15. LinkedList.<init>()V: Line 30
   * Goal 16. LinkedList.<init>()V: Line 31
   * Goal 17. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 18. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 24. LinkedList.currentData()Ljava/lang/Object;: Line 53
   * Goal 25. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 26. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 27. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 28. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 29. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 30. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 31. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 32. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 33. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 34. [METHOD] LinkedList.<init>()V
   * Goal 35. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 36. [METHOD] LinkedList.currentData()Ljava/lang/Object;
   * Goal 37. [METHODNOEX] LinkedList.<init>()V
   * Goal 38. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 39. [METHODNOEX] LinkedList.currentData()Ljava/lang/Object;
   * Goal 40. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 41. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 42. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 44. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 45. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 46. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 47. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 48. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 49. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 50. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   */

  
  @Test public void test05()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      linkedList0.currentData();
      assertEquals(1, linkedList0.size());
  }

  //Test case number: 6
  /*
   * 59 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList.currentData()Ljava/lang/Object;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 8. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 9. Branch LinkedList.currentData()Ljava/lang/Object;: root-Branch in context: LinkedList:currentData()Ljava/lang/Object;
   * Goal 10. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 11. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 12. [Output]: LinkedList.currentData()Ljava/lang/Object;:NonNull
   * Goal 13. LinkedList.<init>()V: Line 23
   * Goal 14. LinkedList.<init>()V: Line 24
   * Goal 15. LinkedList.<init>()V: Line 25
   * Goal 16. LinkedList.<init>()V: Line 29
   * Goal 17. LinkedList.<init>()V: Line 30
   * Goal 18. LinkedList.<init>()V: Line 31
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 26. LinkedList.currentData()Ljava/lang/Object;: Line 53
   * Goal 27. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 28. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 29. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 30. LinkedList.isEmpty()Z: Line 192
   * Goal 31. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 32. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 33. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 34. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 35. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 36. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 37. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 38. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 39. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 40. [METHOD] LinkedList.<init>()V
   * Goal 41. [METHOD] LinkedList.currentData()Ljava/lang/Object;
   * Goal 42. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 43. [METHODNOEX] LinkedList.<init>()V
   * Goal 44. [METHODNOEX] LinkedList.currentData()Ljava/lang/Object;
   * Goal 45. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 46. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 47. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 48. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 49. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 53. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 54. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 55. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 56. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 58. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test06()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.insertBefore(object0);
      linkedList0.currentData();
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 7
  /*
   * 106 covered goals:
   * Goal 1. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 3. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 4. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 5. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 6. LinkedList.<init>()V: root-Branch
   * Goal 7. LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch
   * Goal 8. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 9. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 10. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 11. LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - false
   * Goal 12. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 13. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 14. Branch LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch in context: LinkedList:insertAfter(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 16. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 17. Branch LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - false in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 18. removeLast()Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 19. [Output]: LinkedList.removeFirst()Ljava/lang/Object;:NonNull
   * Goal 20. LinkedList.<init>()V: Line 23
   * Goal 21. LinkedList.<init>()V: Line 24
   * Goal 22. LinkedList.<init>()V: Line 25
   * Goal 23. LinkedList.<init>()V: Line 29
   * Goal 24. LinkedList.<init>()V: Line 30
   * Goal 25. LinkedList.<init>()V: Line 31
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 32. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 33. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 100
   * Goal 34. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 101
   * Goal 35. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 102
   * Goal 36. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 103
   * Goal 37. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 38. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 39. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 40. LinkedList.isEmpty()Z: Line 192
   * Goal 41. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 42. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 43. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 44. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 45. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 46. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 47. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 48. LinkedList.removeLast()Ljava/lang/Object;: Line 137
   * Goal 49. LinkedList.removeLast()Ljava/lang/Object;: Line 138
   * Goal 50. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 51. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 52. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 53. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 54. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 55. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 56. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 57. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 15
   * Goal 58. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 59. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 60. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 61. [METHOD] LinkedList.<init>()V
   * Goal 62. [METHOD] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 63. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 64. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 65. [METHOD] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 66. [METHODNOEX] LinkedList.<init>()V
   * Goal 67. [METHODNOEX] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 68. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 69. [METHODNOEX] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 70. Weak Mutation 0: LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V:15 - ReplaceVariable n -> this
   * Goal 71. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 72. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 73. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 74. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 75. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 76. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 77. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 78. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 79. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 80. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 81. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 82. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 83. Weak Mutation 40: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp Negation
   * Goal 84. Weak Mutation 41: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp +1
   * Goal 85. Weak Mutation 42: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp -1
   * Goal 86. Weak Mutation 43: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceConstant - 1 -> 0
   * Goal 87. Weak Mutation 44: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> %
   * Goal 88. Weak Mutation 45: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> -
   * Goal 89. Weak Mutation 46: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> *
   * Goal 90. Weak Mutation 47: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> /
   * Goal 91. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 92. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 93. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 94. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 95. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 96. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 97. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 98. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 99. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   * Goal 100. Weak Mutation 61: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp Negation
   * Goal 101. Weak Mutation 62: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp +1
   * Goal 102. Weak Mutation 63: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp -1
   * Goal 103. Weak Mutation 64: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceConstant - 1 -> 0
   * Goal 104. Weak Mutation 65: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceComparisonOperator != -> ==
   * Goal 105. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 106. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  @Test public void test07()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.removeFirst();
      linkedList0.insertAfter((Object) null);
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
 
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 8
  /*
   * 12 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. main([Ljava/lang/String;)V_java.lang.NoClassDefFoundError_IMPLICIT
   * Goal 3. LinkedList.<init>()V: Line 23
   * Goal 4. LinkedList.<init>()V: Line 24
   * Goal 5. LinkedList.<init>()V: Line 25
   * Goal 6. LinkedList.<init>()V: Line 29
   * Goal 7. LinkedList.<init>()V: Line 30
   * Goal 8. LinkedList.<init>()V: Line 31
   * Goal 9. LinkedList.main([Ljava/lang/String;)V: Line 208
   * Goal 10. LinkedList.main([Ljava/lang/String;)V: Line 210
   * Goal 11. [METHOD] LinkedList.main([Ljava/lang/String;)V
   * Goal 12. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  @Test public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        LinkedList.main((String[]) null);

      
      } catch(NoClassDefFoundError e) {
         //
         // CsusStudent
         //
         ;
      }
  }

  //Test case number: 9
  /*
   * 16 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch in context: LinkedList:insertAfter(Ljava/lang/Object;)V
   * Goal 5. insertAfter(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 100
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  @Test public void test09()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      // Undeclared exception!
      try { 
        linkedList0.insertAfter((Object) null);     
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 10
  /*
   * 50 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList.<init>()V: root-Branch
   * Goal 4. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 5. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 6. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 7. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 8. Branch LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true in context: LinkedList:isEmpty()Z
   * Goal 9. [Output]: LinkedList.isEmpty()Z:False
   * Goal 10. LinkedList.<init>()V: Line 23
   * Goal 11. LinkedList.<init>()V: Line 24
   * Goal 12. LinkedList.<init>()V: Line 25
   * Goal 13. LinkedList.<init>()V: Line 29
   * Goal 14. LinkedList.<init>()V: Line 30
   * Goal 15. LinkedList.<init>()V: Line 31
   * Goal 16. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 17. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 18. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 23. LinkedList.isEmpty()Z: Line 192
   * Goal 24. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 25. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 26. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 27. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 28. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 29. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 30. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 31. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 32. [METHOD] LinkedList.<init>()V
   * Goal 33. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 34. [METHOD] LinkedList.isEmpty()Z
   * Goal 35. [METHODNOEX] LinkedList.<init>()V
   * Goal 36. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 37. [METHODNOEX] LinkedList.isEmpty()Z
   * Goal 38. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 39. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 40. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 41. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 42. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 43. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 44. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 45. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 46. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 47. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 48. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 49. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 50. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test10()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      boolean boolean0 = linkedList0.isEmpty();
      assertFalse(boolean0);
  }

  //Test case number: 11
  /*
   * 19 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false in context: LinkedList:isEmpty()Z
   * Goal 5. [Output]: LinkedList.isEmpty()Z:True
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.isEmpty()Z: Line 192
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.isEmpty()Z
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. [METHODNOEX] LinkedList.isEmpty()Z
   * Goal 17. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 19. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test11()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      boolean boolean0 = linkedList0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 12
  /*
   * 112 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.forward()V: I4 Branch 1 IFNE L35 - false
   * Goal 6. LinkedList.forward()V: I8 Branch 2 IFNULL L35 - false
   * Goal 7. LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false
   * Goal 8. LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - true
   * Goal 9. LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - false
   * Goal 10. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 11. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 12. LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false
   * Goal 13. LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true
   * Goal 14. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 15. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 16. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 17. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 18. Branch LinkedList.forward()V: I8 Branch 2 IFNULL L35 - false in context: LinkedList:forward()V
   * Goal 19. Branch LinkedList.forward()V: I4 Branch 1 IFNE L35 - false in context: LinkedList:forward()V
   * Goal 20. Branch LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false in context: LinkedList:backward()V
   * Goal 21. Branch LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - true in context: LinkedList:backward()V
   * Goal 22. Branch LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - false in context: LinkedList:backward()V
   * Goal 23. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 24. Branch LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 25. Branch LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 26. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 27. LinkedList.<init>()V: Line 23
   * Goal 28. LinkedList.<init>()V: Line 24
   * Goal 29. LinkedList.<init>()V: Line 25
   * Goal 30. LinkedList.<init>()V: Line 29
   * Goal 31. LinkedList.<init>()V: Line 30
   * Goal 32. LinkedList.<init>()V: Line 31
   * Goal 33. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 35. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 36. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 37. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 38. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 39. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 40. LinkedList.addLast(Ljava/lang/Object;)V: Line 75
   * Goal 41. LinkedList.addLast(Ljava/lang/Object;)V: Line 76
   * Goal 42. LinkedList.addLast(Ljava/lang/Object;)V: Line 77
   * Goal 43. LinkedList.addLast(Ljava/lang/Object;)V: Line 78
   * Goal 44. LinkedList.addLast(Ljava/lang/Object;)V: Line 82
   * Goal 45. LinkedList.addLast(Ljava/lang/Object;)V: Line 83
   * Goal 46. LinkedList.addLast(Ljava/lang/Object;)V: Line 84
   * Goal 47. LinkedList.backward()V: Line 42
   * Goal 48. LinkedList.backward()V: Line 43
   * Goal 49. LinkedList.backward()V: Line 44
   * Goal 50. LinkedList.backward()V: Line 45
   * Goal 51. LinkedList.backward()V: Line 47
   * Goal 52. LinkedList.backward()V: Line 49
   * Goal 53. LinkedList.forward()V: Line 35
   * Goal 54. LinkedList.forward()V: Line 36
   * Goal 55. LinkedList.forward()V: Line 38
   * Goal 56. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 57. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 58. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 59. LinkedList.isEmpty()Z: Line 192
   * Goal 60. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 61. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 62. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 63. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 64. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 65. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 66. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 67. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 68. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 69. [METHOD] LinkedList.<init>()V
   * Goal 70. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 71. [METHOD] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 72. [METHOD] LinkedList.backward()V
   * Goal 73. [METHOD] LinkedList.forward()V
   * Goal 74. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 75. [METHODNOEX] LinkedList.<init>()V
   * Goal 76. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 77. [METHODNOEX] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 78. [METHODNOEX] LinkedList.backward()V
   * Goal 79. [METHODNOEX] LinkedList.forward()V
   * Goal 80. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 81. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 82. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 83. Weak Mutation 3: LinkedList.forward()V:35 - ReplaceComparisonOperator != -> ==
   * Goal 84. Weak Mutation 4: LinkedList.forward()V:35 - ReplaceComparisonOperator = null -> != null
   * Goal 85. Weak Mutation 5: LinkedList.backward()V:42 - ReplaceComparisonOperator == -> !=
   * Goal 86. Weak Mutation 6: LinkedList.backward()V:44 - ReplaceComparisonOperator == -> !=
   * Goal 87. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 88. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 89. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 90. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 91. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 92. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 93. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 94. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 95. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 96. Weak Mutation 16: LinkedList.addLast(Ljava/lang/Object;)V:77 - ReplaceComparisonOperator = null -> != null
   * Goal 97. Weak Mutation 17: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceVariable tmp -> last
   * Goal 98. Weak Mutation 18: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceComparisonOperator = null -> != null
   * Goal 99. Weak Mutation 20: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable tmp -> last
   * Goal 100. Weak Mutation 21: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable last -> tmp
   * Goal 101. Weak Mutation 22: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp Negation
   * Goal 102. Weak Mutation 23: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp +1
   * Goal 103. Weak Mutation 24: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp -1
   * Goal 104. Weak Mutation 25: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceConstant - 1 -> 0
   * Goal 105. Weak Mutation 26: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> %
   * Goal 106. Weak Mutation 27: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> -
   * Goal 107. Weak Mutation 28: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> *
   * Goal 108. Weak Mutation 29: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> /
   * Goal 109. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 110. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 111. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   * Goal 112. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test12()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.insertBefore(object0);
      linkedList0.addLast(object0);
      linkedList0.addFirst("{l2Q*OI");
      linkedList0.forward();
      linkedList0.backward();
      assertEquals(2, linkedList0.size());
  }

  //Test case number: 13
  /*
   * 88 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 7. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 8. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 9. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 10. LinkedList.toString()Ljava/lang/String;: I12 Branch 22 IFNULL L200 - true
   * Goal 11. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 12. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 13. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 14. Branch LinkedList.toString()Ljava/lang/String;: I12 Branch 22 IFNULL L200 - true in context: LinkedList:toString()Ljava/lang/String;
   * Goal 15. [Output]: LinkedList.removeFirst()Ljava/lang/Object;:NonNull
   * Goal 16. [Output]: LinkedList.toString()Ljava/lang/String;:NonEmptyString
   * Goal 17. LinkedList.<init>()V: Line 23
   * Goal 18. LinkedList.<init>()V: Line 24
   * Goal 19. LinkedList.<init>()V: Line 25
   * Goal 20. LinkedList.<init>()V: Line 29
   * Goal 21. LinkedList.<init>()V: Line 30
   * Goal 22. LinkedList.<init>()V: Line 31
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 30. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 31. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 32. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 33. LinkedList.isEmpty()Z: Line 192
   * Goal 34. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 35. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 36. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 37. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 38. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 39. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 40. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 41. LinkedList.toString()Ljava/lang/String;: Line 197
   * Goal 42. LinkedList.toString()Ljava/lang/String;: Line 199
   * Goal 43. LinkedList.toString()Ljava/lang/String;: Line 200
   * Goal 44. LinkedList.toString()Ljava/lang/String;: Line 204
   * Goal 45. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 46. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 47. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 48. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 49. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 50. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 51. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 52. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 53. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 54. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 55. [METHOD] LinkedList.<init>()V
   * Goal 56. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 57. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 58. [METHOD] LinkedList.toString()Ljava/lang/String;
   * Goal 59. [METHODNOEX] LinkedList.<init>()V
   * Goal 60. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 61. [METHODNOEX] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 62. [METHODNOEX] LinkedList.toString()Ljava/lang/String;
   * Goal 63. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 64. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 65. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 66. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 67. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 68. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 69. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 70. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 71. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 72. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 73. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 74. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 75. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 76. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 77. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 78. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 79. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 80. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 81. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 82. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 83. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   * Goal 84. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 85. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   * Goal 86. Weak Mutation 117: LinkedList.toString()Ljava/lang/String;:197 - ReplaceConstant - ( HEAD ->  -> 
   * Goal 87. Weak Mutation 118: LinkedList.toString()Ljava/lang/String;:200 - ReplaceComparisonOperator = null -> != null
   * Goal 88. Weak Mutation 120: LinkedList.toString()Ljava/lang/String;:204 - ReplaceConstant -  ) -> 
   */

  
  @Test public void test13()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.removeFirst();
      linkedList0.toString();
      assertTrue(linkedList0.isEmpty());
  }

  //Test case number: 14
  /*
   * 72 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false
   * Goal 8. LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true
   * Goal 9. LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - true
   * Goal 10. LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - false
   * Goal 11. LinkedList.remove(Ljava/lang/Object;)V: I38 Branch 18 IFNULL L166 - false
   * Goal 12. LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - false
   * Goal 13. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 14. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 16. Branch LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 17. Branch LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 18. Branch LinkedList.remove(Ljava/lang/Object;)V: I38 Branch 18 IFNULL L166 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 19. Branch LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 20. Branch LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 21. Branch LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 22. remove(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 23. LinkedList.<init>()V: Line 23
   * Goal 24. LinkedList.<init>()V: Line 24
   * Goal 25. LinkedList.<init>()V: Line 25
   * Goal 26. LinkedList.<init>()V: Line 29
   * Goal 27. LinkedList.<init>()V: Line 30
   * Goal 28. LinkedList.<init>()V: Line 31
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 32. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 33. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 35. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 36. LinkedList.remove(Ljava/lang/Object;)V: Line 159
   * Goal 37. LinkedList.remove(Ljava/lang/Object;)V: Line 160
   * Goal 38. LinkedList.remove(Ljava/lang/Object;)V: Line 161
   * Goal 39. LinkedList.remove(Ljava/lang/Object;)V: Line 166
   * Goal 40. LinkedList.remove(Ljava/lang/Object;)V: Line 167
   * Goal 41. LinkedList.remove(Ljava/lang/Object;)V: Line 169
   * Goal 42. LinkedList.remove(Ljava/lang/Object;)V: Line 170
   * Goal 43. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 44. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 45. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 46. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 47. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 48. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 49. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 50. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 51. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 52. [METHOD] LinkedList.<init>()V
   * Goal 53. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 54. [METHOD] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 55. [METHODNOEX] LinkedList.<init>()V
   * Goal 56. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 57. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 58. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 59. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 61. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 62. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 63. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 64. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 65. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 66. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 67. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 68. Weak Mutation 78: LinkedList.remove(Ljava/lang/Object;)V:160 - ReplaceComparisonOperator = null -> != null
   * Goal 69. Weak Mutation 79: LinkedList.remove(Ljava/lang/Object;)V:161 - ReplaceComparisonOperator != -> ==
   * Goal 70. Weak Mutation 88: LinkedList.remove(Ljava/lang/Object;)V:166 - ReplaceComparisonOperator == -> !=
   * Goal 71. Weak Mutation 89: LinkedList.remove(Ljava/lang/Object;)V:166 - ReplaceComparisonOperator = null -> != null
   * Goal 72. Weak Mutation 90: LinkedList.remove(Ljava/lang/Object;)V:169 - ReplaceComparisonOperator != -> ==
   */

  @Test public void test14()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      linkedList0.addFirst((Object) null);
      // Undeclared exception!
      try { 
        linkedList0.remove((Object) null);     
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 15
  /*
   * 67 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 6. LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false
   * Goal 7. LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true
   * Goal 8. LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - false
   * Goal 9. LinkedList.remove(Ljava/lang/Object;)V: I38 Branch 18 IFNULL L166 - true
   * Goal 10. LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - true
   * Goal 11. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 12. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 13. Branch LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 14. Branch LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 16. Branch LinkedList.remove(Ljava/lang/Object;)V: I38 Branch 18 IFNULL L166 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 17. Branch LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 18. LinkedList.<init>()V: Line 23
   * Goal 19. LinkedList.<init>()V: Line 24
   * Goal 20. LinkedList.<init>()V: Line 25
   * Goal 21. LinkedList.<init>()V: Line 29
   * Goal 22. LinkedList.<init>()V: Line 30
   * Goal 23. LinkedList.<init>()V: Line 31
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 31. LinkedList.remove(Ljava/lang/Object;)V: Line 159
   * Goal 32. LinkedList.remove(Ljava/lang/Object;)V: Line 160
   * Goal 33. LinkedList.remove(Ljava/lang/Object;)V: Line 161
   * Goal 34. LinkedList.remove(Ljava/lang/Object;)V: Line 166
   * Goal 35. LinkedList.remove(Ljava/lang/Object;)V: Line 169
   * Goal 36. LinkedList.remove(Ljava/lang/Object;)V: Line 183
   * Goal 37. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 38. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 39. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 40. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 41. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 43. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 44. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 45. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 46. [METHOD] LinkedList.<init>()V
   * Goal 47. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 48. [METHOD] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 49. [METHODNOEX] LinkedList.<init>()V
   * Goal 50. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 51. [METHODNOEX] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 52. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 53. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 55. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 57. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 58. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 61. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 62. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 78: LinkedList.remove(Ljava/lang/Object;)V:160 - ReplaceComparisonOperator = null -> != null
   * Goal 64. Weak Mutation 79: LinkedList.remove(Ljava/lang/Object;)V:161 - ReplaceComparisonOperator != -> ==
   * Goal 65. Weak Mutation 88: LinkedList.remove(Ljava/lang/Object;)V:166 - ReplaceComparisonOperator == -> !=
   * Goal 66. Weak Mutation 89: LinkedList.remove(Ljava/lang/Object;)V:166 - ReplaceComparisonOperator = null -> != null
   * Goal 67. Weak Mutation 90: LinkedList.remove(Ljava/lang/Object;)V:169 - ReplaceComparisonOperator != -> ==
   */

  
  @Test public void test15()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      Object object0 = new Object();
      linkedList0.remove(object0);
      assertFalse(linkedList0.isEmpty());
  }

  //Test case number: 16
  /*
   * 19 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - true
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 5. LinkedList.<init>()V: Line 23
   * Goal 6. LinkedList.<init>()V: Line 24
   * Goal 7. LinkedList.<init>()V: Line 25
   * Goal 8. LinkedList.<init>()V: Line 29
   * Goal 9. LinkedList.<init>()V: Line 30
   * Goal 10. LinkedList.<init>()V: Line 31
   * Goal 11. LinkedList.remove(Ljava/lang/Object;)V: Line 159
   * Goal 12. LinkedList.remove(Ljava/lang/Object;)V: Line 160
   * Goal 13. LinkedList.remove(Ljava/lang/Object;)V: Line 183
   * Goal 14. [METHOD] LinkedList.<init>()V
   * Goal 15. [METHOD] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 16. [METHODNOEX] LinkedList.<init>()V
   * Goal 17. [METHODNOEX] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 18. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 78: LinkedList.remove(Ljava/lang/Object;)V:160 - ReplaceComparisonOperator = null -> != null
   */

  
  @Test public void test16()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.remove(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 17
  /*
   * 139 covered goals:
   * Goal 1. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 3. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 4. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 5. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 6. LinkedList.<init>()V: root-Branch
   * Goal 7. LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch
   * Goal 8. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 9. LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false
   * Goal 10. LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true
   * Goal 11. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 12. LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - true
   * Goal 13. LinkedList.removeLast()Ljava/lang/Object;: I30 Branch 13 IFNE L142 - false
   * Goal 14. LinkedList.removeLast()Ljava/lang/Object;: I41 Branch 14 IFNULL L144 - true
   * Goal 15. LinkedList.removeLast()Ljava/lang/Object;: I41 Branch 14 IFNULL L144 - false
   * Goal 16. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 17. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 18. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 19. Branch LinkedList.insertAfter(Ljava/lang/Object;)V: root-Branch in context: LinkedList:insertAfter(Ljava/lang/Object;)V
   * Goal 20. Branch LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 21. Branch LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 22. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 23. Branch LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - true in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 24. Branch LinkedList.removeLast()Ljava/lang/Object;: I30 Branch 13 IFNE L142 - false in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 25. Branch LinkedList.removeLast()Ljava/lang/Object;: I41 Branch 14 IFNULL L144 - true in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 26. Branch LinkedList.removeLast()Ljava/lang/Object;: I41 Branch 14 IFNULL L144 - false in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 27. [Output]: LinkedList.removeLast()Ljava/lang/Object;:NonNull
   * Goal 28. LinkedList.<init>()V: Line 23
   * Goal 29. LinkedList.<init>()V: Line 24
   * Goal 30. LinkedList.<init>()V: Line 25
   * Goal 31. LinkedList.<init>()V: Line 29
   * Goal 32. LinkedList.<init>()V: Line 30
   * Goal 33. LinkedList.<init>()V: Line 31
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 35. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 36. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 37. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 38. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 39. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 40. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 41. LinkedList.addLast(Ljava/lang/Object;)V: Line 75
   * Goal 42. LinkedList.addLast(Ljava/lang/Object;)V: Line 76
   * Goal 43. LinkedList.addLast(Ljava/lang/Object;)V: Line 77
   * Goal 44. LinkedList.addLast(Ljava/lang/Object;)V: Line 78
   * Goal 45. LinkedList.addLast(Ljava/lang/Object;)V: Line 82
   * Goal 46. LinkedList.addLast(Ljava/lang/Object;)V: Line 83
   * Goal 47. LinkedList.addLast(Ljava/lang/Object;)V: Line 84
   * Goal 48. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 100
   * Goal 49. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 101
   * Goal 50. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 102
   * Goal 51. LinkedList.insertAfter(Ljava/lang/Object;)V: Line 103
   * Goal 52. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 53. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 54. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 55. LinkedList.isEmpty()Z: Line 192
   * Goal 56. LinkedList.removeLast()Ljava/lang/Object;: Line 137
   * Goal 57. LinkedList.removeLast()Ljava/lang/Object;: Line 142
   * Goal 58. LinkedList.removeLast()Ljava/lang/Object;: Line 143
   * Goal 59. LinkedList.removeLast()Ljava/lang/Object;: Line 144
   * Goal 60. LinkedList.removeLast()Ljava/lang/Object;: Line 145
   * Goal 61. LinkedList.removeLast()Ljava/lang/Object;: Line 147
   * Goal 62. LinkedList.removeLast()Ljava/lang/Object;: Line 148
   * Goal 63. LinkedList.removeLast()Ljava/lang/Object;: Line 149
   * Goal 64. LinkedList.removeLast()Ljava/lang/Object;: Line 150
   * Goal 65. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 66. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 67. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 68. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 69. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 70. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 71. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 72. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 15
   * Goal 73. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 74. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 75. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 76. [METHOD] LinkedList.<init>()V
   * Goal 77. [METHOD] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 78. [METHOD] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 79. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 80. [METHOD] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 81. [METHODNOEX] LinkedList.<init>()V
   * Goal 82. [METHODNOEX] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 83. [METHODNOEX] LinkedList.insertAfter(Ljava/lang/Object;)V
   * Goal 84. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 85. [METHODNOEX] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 86. Weak Mutation 0: LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V:15 - ReplaceVariable n -> this
   * Goal 87. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 88. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 89. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 90. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 91. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 92. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 93. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 94. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 95. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 96. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 97. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 98. Weak Mutation 16: LinkedList.addLast(Ljava/lang/Object;)V:77 - ReplaceComparisonOperator = null -> != null
   * Goal 99. Weak Mutation 17: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceVariable tmp -> last
   * Goal 100. Weak Mutation 18: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceComparisonOperator = null -> != null
   * Goal 101. Weak Mutation 20: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable tmp -> last
   * Goal 102. Weak Mutation 21: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable last -> tmp
   * Goal 103. Weak Mutation 22: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp Negation
   * Goal 104. Weak Mutation 23: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp +1
   * Goal 105. Weak Mutation 24: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp -1
   * Goal 106. Weak Mutation 25: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceConstant - 1 -> 0
   * Goal 107. Weak Mutation 26: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> %
   * Goal 108. Weak Mutation 27: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> -
   * Goal 109. Weak Mutation 28: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> *
   * Goal 110. Weak Mutation 29: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> /
   * Goal 111. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 112. Weak Mutation 40: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp Negation
   * Goal 113. Weak Mutation 41: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp +1
   * Goal 114. Weak Mutation 42: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - InsertUnaryOp -1
   * Goal 115. Weak Mutation 43: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceConstant - 1 -> 0
   * Goal 116. Weak Mutation 44: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> %
   * Goal 117. Weak Mutation 45: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> -
   * Goal 118. Weak Mutation 46: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> *
   * Goal 119. Weak Mutation 47: LinkedList.insertAfter(Ljava/lang/Object;)V:102 - ReplaceArithmeticOperator + -> /
   * Goal 120. Weak Mutation 61: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp Negation
   * Goal 121. Weak Mutation 62: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp +1
   * Goal 122. Weak Mutation 63: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp -1
   * Goal 123. Weak Mutation 64: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceConstant - 1 -> 0
   * Goal 124. Weak Mutation 65: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceComparisonOperator != -> ==
   * Goal 125. Weak Mutation 66: LinkedList.removeLast()Ljava/lang/Object;:142 - ReplaceComparisonOperator != -> ==
   * Goal 126. Weak Mutation 67: LinkedList.removeLast()Ljava/lang/Object;:144 - ReplaceComparisonOperator = null -> != null
   * Goal 127. Weak Mutation 68: LinkedList.removeLast()Ljava/lang/Object;:148 - ReplaceVariable tmp -> tmp2
   * Goal 128. Weak Mutation 69: LinkedList.removeLast()Ljava/lang/Object;:149 - InsertUnaryOp Negation
   * Goal 129. Weak Mutation 70: LinkedList.removeLast()Ljava/lang/Object;:149 - InsertUnaryOp +1
   * Goal 130. Weak Mutation 71: LinkedList.removeLast()Ljava/lang/Object;:149 - InsertUnaryOp -1
   * Goal 131. Weak Mutation 72: LinkedList.removeLast()Ljava/lang/Object;:149 - ReplaceConstant - 1 -> 0
   * Goal 132. Weak Mutation 73: LinkedList.removeLast()Ljava/lang/Object;:149 - ReplaceArithmeticOperator - -> +
   * Goal 133. Weak Mutation 74: LinkedList.removeLast()Ljava/lang/Object;:149 - ReplaceArithmeticOperator - -> %
   * Goal 134. Weak Mutation 75: LinkedList.removeLast()Ljava/lang/Object;:149 - ReplaceArithmeticOperator - -> *
   * Goal 135. Weak Mutation 76: LinkedList.removeLast()Ljava/lang/Object;:149 - ReplaceArithmeticOperator - -> /
   * Goal 136. Weak Mutation 77: LinkedList.removeLast()Ljava/lang/Object;:150 - ReplaceVariable tmp2 -> tmp
   * Goal 137. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 138. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   * Goal 139. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test17()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      linkedList0.insertBefore(object0);
      Integer integer0 = new Integer(0);
      linkedList0.addLast(object0);
      linkedList0.insertAfter(integer0);
      linkedList0.removeLast();
      assertEquals(1, linkedList0.size());
  }

  //Test case number: 18
  /*
   * 84 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 6. LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - true
   * Goal 7. LinkedList.removeLast()Ljava/lang/Object;: I30 Branch 13 IFNE L142 - true
   * Goal 8. LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false
   * Goal 9. LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true
   * Goal 10. LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - true
   * Goal 11. LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - false
   * Goal 12. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 13. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 14. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - true in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 16. Branch LinkedList.removeLast()Ljava/lang/Object;: I30 Branch 13 IFNE L142 - true in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 17. Branch LinkedList.remove(Ljava/lang/Object;)V: I9 Branch 15 IFNULL L160 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 18. Branch LinkedList.remove(Ljava/lang/Object;)V: I15 Branch 16 IF_ACMPNE L161 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 19. Branch LinkedList.remove(Ljava/lang/Object;)V: I35 Branch 17 IF_ACMPEQ L166 - true in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 20. Branch LinkedList.remove(Ljava/lang/Object;)V: I50 Branch 19 IF_ACMPNE L169 - false in context: LinkedList:remove(Ljava/lang/Object;)V
   * Goal 21. remove(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 22. [Output]: LinkedList.removeLast()Ljava/lang/Object;:Null
   * Goal 23. LinkedList.<init>()V: Line 23
   * Goal 24. LinkedList.<init>()V: Line 24
   * Goal 25. LinkedList.<init>()V: Line 25
   * Goal 26. LinkedList.<init>()V: Line 29
   * Goal 27. LinkedList.<init>()V: Line 30
   * Goal 28. LinkedList.<init>()V: Line 31
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 32. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 33. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 35. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 36. LinkedList.isEmpty()Z: Line 192
   * Goal 37. LinkedList.remove(Ljava/lang/Object;)V: Line 159
   * Goal 38. LinkedList.remove(Ljava/lang/Object;)V: Line 160
   * Goal 39. LinkedList.remove(Ljava/lang/Object;)V: Line 161
   * Goal 40. LinkedList.remove(Ljava/lang/Object;)V: Line 166
   * Goal 41. LinkedList.remove(Ljava/lang/Object;)V: Line 169
   * Goal 42. LinkedList.remove(Ljava/lang/Object;)V: Line 170
   * Goal 43. LinkedList.removeLast()Ljava/lang/Object;: Line 137
   * Goal 44. LinkedList.removeLast()Ljava/lang/Object;: Line 142
   * Goal 45. LinkedList.removeLast()Ljava/lang/Object;: Line 153
   * Goal 46. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 47. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 48. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 49. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 50. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 51. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 52. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 53. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 54. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 55. [METHOD] LinkedList.<init>()V
   * Goal 56. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 57. [METHOD] LinkedList.remove(Ljava/lang/Object;)V
   * Goal 58. [METHOD] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 59. [METHODNOEX] LinkedList.<init>()V
   * Goal 60. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 61. [METHODNOEX] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 62. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 63. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 64. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 65. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 66. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 67. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 68. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 70. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 71. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 72. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 73. Weak Mutation 61: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp Negation
   * Goal 74. Weak Mutation 62: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp +1
   * Goal 75. Weak Mutation 63: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp -1
   * Goal 76. Weak Mutation 64: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceConstant - 1 -> 0
   * Goal 77. Weak Mutation 65: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceComparisonOperator != -> ==
   * Goal 78. Weak Mutation 66: LinkedList.removeLast()Ljava/lang/Object;:142 - ReplaceComparisonOperator != -> ==
   * Goal 79. Weak Mutation 78: LinkedList.remove(Ljava/lang/Object;)V:160 - ReplaceComparisonOperator = null -> != null
   * Goal 80. Weak Mutation 79: LinkedList.remove(Ljava/lang/Object;)V:161 - ReplaceComparisonOperator != -> ==
   * Goal 81. Weak Mutation 88: LinkedList.remove(Ljava/lang/Object;)V:166 - ReplaceComparisonOperator == -> !=
   * Goal 82. Weak Mutation 90: LinkedList.remove(Ljava/lang/Object;)V:169 - ReplaceComparisonOperator != -> ==
   * Goal 83. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 84. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  @Test public void test18()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = linkedList0.removeLast();
      linkedList0.addFirst((Object) null);
      // Undeclared exception!
      try { 
        linkedList0.remove(object0);      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 19
  /*
   * 64 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 7. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 8. LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - true
   * Goal 9. LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - true
   * Goal 10. LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - false
   * Goal 11. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 12. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 13. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 14. Branch LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - true in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 15. Branch LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - false in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 16. Branch LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - true in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 17. [Output]: LinkedList.getLast()Ljava/lang/Object;:Null
   * Goal 18. LinkedList.<init>()V: Line 23
   * Goal 19. LinkedList.<init>()V: Line 24
   * Goal 20. LinkedList.<init>()V: Line 25
   * Goal 21. LinkedList.<init>()V: Line 29
   * Goal 22. LinkedList.<init>()V: Line 30
   * Goal 23. LinkedList.<init>()V: Line 31
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 31. LinkedList.getLast()Ljava/lang/Object;: Line 112
   * Goal 32. LinkedList.getLast()Ljava/lang/Object;: Line 116
   * Goal 33. LinkedList.getLast()Ljava/lang/Object;: Line 117
   * Goal 34. LinkedList.getLast()Ljava/lang/Object;: Line 118
   * Goal 35. LinkedList.getLast()Ljava/lang/Object;: Line 120
   * Goal 36. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 37. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 38. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 39. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 40. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 41. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 43. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 44. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 45. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 46. [METHOD] LinkedList.<init>()V
   * Goal 47. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 48. [METHOD] LinkedList.getLast()Ljava/lang/Object;
   * Goal 49. [METHODNOEX] LinkedList.<init>()V
   * Goal 50. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 51. [METHODNOEX] LinkedList.getLast()Ljava/lang/Object;
   * Goal 52. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 53. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 55. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 57. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 58. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 61. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 62. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 48: LinkedList.getLast()Ljava/lang/Object;:112 - ReplaceComparisonOperator != null -> = null
   * Goal 64. Weak Mutation 49: LinkedList.getLast()Ljava/lang/Object;:117 - ReplaceComparisonOperator = null -> != null
   */

  
  @Test public void test19()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      linkedList0.addFirst((Object) null);
      linkedList0.getLast();
      assertEquals(2, linkedList0.size());
  }

  //Test case number: 20
  /*
   * 19 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - false
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - false in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 5. [Output]: LinkedList.getLast()Ljava/lang/Object;:Null
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.getLast()Ljava/lang/Object;: Line 112
   * Goal 13. LinkedList.getLast()Ljava/lang/Object;: Line 113
   * Goal 14. [METHOD] LinkedList.<init>()V
   * Goal 15. [METHOD] LinkedList.getLast()Ljava/lang/Object;
   * Goal 16. [METHODNOEX] LinkedList.<init>()V
   * Goal 17. [METHODNOEX] LinkedList.getLast()Ljava/lang/Object;
   * Goal 18. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 19. Weak Mutation 48: LinkedList.getLast()Ljava/lang/Object;:112 - ReplaceComparisonOperator != null -> = null
   */

  
  @Test public void test20()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.getLast();
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 21
  /*
   * 71 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 8. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false
   * Goal 9. LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - false
   * Goal 10. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 11. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 12. LinkedList.toString()Ljava/lang/String;: I12 Branch 22 IFNULL L200 - false
   * Goal 13. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 14. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - false in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 16. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 17. Branch LinkedList.toString()Ljava/lang/String;: I12 Branch 22 IFNULL L200 - false in context: LinkedList:toString()Ljava/lang/String;
   * Goal 18. toString()Ljava/lang/String;_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 19. LinkedList.<init>()V: Line 23
   * Goal 20. LinkedList.<init>()V: Line 24
   * Goal 21. LinkedList.<init>()V: Line 25
   * Goal 22. LinkedList.<init>()V: Line 29
   * Goal 23. LinkedList.<init>()V: Line 30
   * Goal 24. LinkedList.<init>()V: Line 31
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 32. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 33. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 34. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 35. LinkedList.isEmpty()Z: Line 192
   * Goal 36. LinkedList.toString()Ljava/lang/String;: Line 197
   * Goal 37. LinkedList.toString()Ljava/lang/String;: Line 199
   * Goal 38. LinkedList.toString()Ljava/lang/String;: Line 200
   * Goal 39. LinkedList.toString()Ljava/lang/String;: Line 201
   * Goal 40. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 41. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 43. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 44. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 45. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 46. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 47. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 48. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 49. [METHOD] LinkedList.<init>()V
   * Goal 50. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 51. [METHOD] LinkedList.toString()Ljava/lang/String;
   * Goal 52. [METHODNOEX] LinkedList.<init>()V
   * Goal 53. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 54. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 55. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 56. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 57. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 59. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 60. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 61. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 62. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 63. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 64. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 65. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 66. Weak Mutation 31: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 67. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 68. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   * Goal 69. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   * Goal 70. Weak Mutation 117: LinkedList.toString()Ljava/lang/String;:197 - ReplaceConstant - ( HEAD ->  -> 
   * Goal 71. Weak Mutation 118: LinkedList.toString()Ljava/lang/String;:200 - ReplaceComparisonOperator = null -> != null
   */

  //Test case number: 22
  /*
   * 76 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false
   * Goal 8. LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true
   * Goal 9. LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - false
   * Goal 10. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 11. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 12. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 13. Branch LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - false in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 14. Branch LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - true in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.addLast(Ljava/lang/Object;)V: I22 Branch 7 IFNULL L78 - false in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 16. LinkedList.<init>()V: Line 23
   * Goal 17. LinkedList.<init>()V: Line 24
   * Goal 18. LinkedList.<init>()V: Line 25
   * Goal 19. LinkedList.<init>()V: Line 29
   * Goal 20. LinkedList.<init>()V: Line 30
   * Goal 21. LinkedList.<init>()V: Line 31
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 29. LinkedList.addLast(Ljava/lang/Object;)V: Line 75
   * Goal 30. LinkedList.addLast(Ljava/lang/Object;)V: Line 76
   * Goal 31. LinkedList.addLast(Ljava/lang/Object;)V: Line 77
   * Goal 32. LinkedList.addLast(Ljava/lang/Object;)V: Line 78
   * Goal 33. LinkedList.addLast(Ljava/lang/Object;)V: Line 79
   * Goal 34. LinkedList.addLast(Ljava/lang/Object;)V: Line 82
   * Goal 35. LinkedList.addLast(Ljava/lang/Object;)V: Line 83
   * Goal 36. LinkedList.addLast(Ljava/lang/Object;)V: Line 84
   * Goal 37. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 38. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 39. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 40. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 41. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 43. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 44. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 45. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 46. [METHOD] LinkedList.<init>()V
   * Goal 47. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 48. [METHOD] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 49. [METHODNOEX] LinkedList.<init>()V
   * Goal 50. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 51. [METHODNOEX] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 52. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 53. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 54. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 55. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 57. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 58. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 59. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 60. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 61. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 62. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 16: LinkedList.addLast(Ljava/lang/Object;)V:77 - ReplaceComparisonOperator = null -> != null
   * Goal 64. Weak Mutation 17: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceVariable tmp -> last
   * Goal 65. Weak Mutation 18: LinkedList.addLast(Ljava/lang/Object;)V:78 - ReplaceComparisonOperator = null -> != null
   * Goal 66. Weak Mutation 19: LinkedList.addLast(Ljava/lang/Object;)V:79 - ReplaceVariable tmp -> last
   * Goal 67. Weak Mutation 20: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable tmp -> last
   * Goal 68. Weak Mutation 21: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable last -> tmp
   * Goal 69. Weak Mutation 22: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 23: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp +1
   * Goal 71. Weak Mutation 24: LinkedList.addLast(Ljava/lang/Object;)V:83 - InsertUnaryOp -1
   * Goal 72. Weak Mutation 25: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceConstant - 1 -> 0
   * Goal 73. Weak Mutation 26: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> %
   * Goal 74. Weak Mutation 27: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> -
   * Goal 75. Weak Mutation 28: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> *
   * Goal 76. Weak Mutation 29: LinkedList.addLast(Ljava/lang/Object;)V:83 - ReplaceArithmeticOperator + -> /
   */

  
  @Test public void test22()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst((Object) null);
      linkedList0.addFirst((Object) null);
      linkedList0.addLast(linkedList0);
      assertEquals(3, linkedList0.size());
  }

  //Test case number: 23
  /*
   * 30 covered goals:
   * Goal 1. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 2. LinkedList.<init>()V: root-Branch
   * Goal 3. LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - true
   * Goal 4. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 5. Branch LinkedList.addLast(Ljava/lang/Object;)V: I17 Branch 6 IFNULL L77 - true in context: LinkedList:addLast(Ljava/lang/Object;)V
   * Goal 6. addLast(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 7. LinkedList.<init>()V: Line 23
   * Goal 8. LinkedList.<init>()V: Line 24
   * Goal 9. LinkedList.<init>()V: Line 25
   * Goal 10. LinkedList.<init>()V: Line 29
   * Goal 11. LinkedList.<init>()V: Line 30
   * Goal 12. LinkedList.<init>()V: Line 31
   * Goal 13. LinkedList.addLast(Ljava/lang/Object;)V: Line 75
   * Goal 14. LinkedList.addLast(Ljava/lang/Object;)V: Line 76
   * Goal 15. LinkedList.addLast(Ljava/lang/Object;)V: Line 77
   * Goal 16. LinkedList.addLast(Ljava/lang/Object;)V: Line 82
   * Goal 17. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 18. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 19. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 20. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 21. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 22. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 23. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 24. [METHOD] LinkedList.<init>()V
   * Goal 25. [METHOD] LinkedList.addLast(Ljava/lang/Object;)V
   * Goal 26. [METHODNOEX] LinkedList.<init>()V
   * Goal 27. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 28. Weak Mutation 16: LinkedList.addLast(Ljava/lang/Object;)V:77 - ReplaceComparisonOperator = null -> != null
   * Goal 29. Weak Mutation 20: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable tmp -> last
   * Goal 30. Weak Mutation 21: LinkedList.addLast(Ljava/lang/Object;)V:82 - ReplaceVariable last -> tmp
   */

  @Test public void test23()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        linkedList0.addLast(object0);

      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 24
  /*
   * 91 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 7. LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false
   * Goal 8. LinkedList.backward()V: I18 Branch 4 IF_ACMPEQ L44 - false
   * Goal 9. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true
   * Goal 10. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 11. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false
   * Goal 12. LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - true
   * Goal 13. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 14. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 15. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 16. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 17. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - true in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 18. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - false in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 19. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I9 Branch 9 IF_ACMPNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 20. insertBefore(Ljava/lang/Object;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 21. [Output]: LinkedList.removeFirst()Ljava/lang/Object;:NonNull
   * Goal 22. LinkedList.<init>()V: Line 23
   * Goal 23. LinkedList.<init>()V: Line 24
   * Goal 24. LinkedList.<init>()V: Line 25
   * Goal 25. LinkedList.<init>()V: Line 29
   * Goal 26. LinkedList.<init>()V: Line 30
   * Goal 27. LinkedList.<init>()V: Line 31
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 31. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 32. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 33. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 34. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 35. LinkedList.backward()V: Line 42
   * Goal 36. LinkedList.backward()V: Line 43
   * Goal 37. LinkedList.backward()V: Line 44
   * Goal 38. LinkedList.backward()V: Line 45
   * Goal 39. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 40. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 92
   * Goal 41. LinkedList.isEmpty()Z: Line 192
   * Goal 42. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 43. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 44. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 45. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 46. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 47. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 48. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 49. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 50. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 51. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 52. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 53. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 54. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 55. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 56. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 57. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 58. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 59. [METHOD] LinkedList.<init>()V
   * Goal 60. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 61. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 62. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 63. [METHODNOEX] LinkedList.<init>()V
   * Goal 64. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 65. [METHODNOEX] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 66. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 67. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 5: LinkedList.backward()V:42 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 6: LinkedList.backward()V:44 - ReplaceComparisonOperator == -> !=
   * Goal 70. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 71. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 72. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 73. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 74. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 75. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 76. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 77. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 78. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 79. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 80. Weak Mutation 31: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 81. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 82. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 83. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 84. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 85. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 86. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 87. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 88. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 89. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   * Goal 90. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 91. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  @Test public void test24()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst(linkedList0);
      linkedList0.removeFirst();
      Integer integer0 = new Integer(6);
      linkedList0.addFirst(integer0);
      // Undeclared exception!
      try { 
        linkedList0.insertBefore(linkedList0);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 25
  /*
   * 94 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 7. LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false
   * Goal 8. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 9. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 10. LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - false
   * Goal 11. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 12. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 13. Branch LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - false in context: LinkedList:backward()V
   * Goal 14. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 15. Branch LinkedList.removeLast()Ljava/lang/Object;: I5 Branch 12 IF_ICMPNE L137 - false in context: LinkedList:removeLast()Ljava/lang/Object;
   * Goal 16. backward()V_java.lang.NullPointerException_IMPLICIT
   * Goal 17. [Output]: LinkedList.removeLast()Ljava/lang/Object;:NonNull
   * Goal 18. LinkedList.<init>()V: Line 23
   * Goal 19. LinkedList.<init>()V: Line 24
   * Goal 20. LinkedList.<init>()V: Line 25
   * Goal 21. LinkedList.<init>()V: Line 29
   * Goal 22. LinkedList.<init>()V: Line 30
   * Goal 23. LinkedList.<init>()V: Line 31
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 29. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 30. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 31. LinkedList.backward()V: Line 42
   * Goal 32. LinkedList.backward()V: Line 43
   * Goal 33. LinkedList.backward()V: Line 44
   * Goal 34. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 35. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 36. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 37. LinkedList.isEmpty()Z: Line 192
   * Goal 38. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 39. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 40. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 41. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 42. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 43. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 44. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 45. LinkedList.removeLast()Ljava/lang/Object;: Line 137
   * Goal 46. LinkedList.removeLast()Ljava/lang/Object;: Line 138
   * Goal 47. LinkedList.removeLast()Ljava/lang/Object;: Line 139
   * Goal 48. LinkedList.removeLast()Ljava/lang/Object;: Line 140
   * Goal 49. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 50. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 51. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 52. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 53. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 54. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 55. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 56. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 57. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 58. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 59. [METHOD] LinkedList.<init>()V
   * Goal 60. [METHOD] LinkedList.backward()V
   * Goal 61. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 62. [METHOD] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 63. [METHODNOEX] LinkedList.<init>()V
   * Goal 64. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 65. [METHODNOEX] LinkedList.removeLast()Ljava/lang/Object;
   * Goal 66. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 67. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 68. Weak Mutation 5: LinkedList.backward()V:42 - ReplaceComparisonOperator == -> !=
   * Goal 69. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 70. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 71. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 72. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 73. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 74. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 75. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 76. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 77. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 78. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 79. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 80. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 81. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 82. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 83. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 84. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 85. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 86. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 87. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   * Goal 88. Weak Mutation 61: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp Negation
   * Goal 89. Weak Mutation 62: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp +1
   * Goal 90. Weak Mutation 63: LinkedList.removeLast()Ljava/lang/Object;:137 - InsertUnaryOp -1
   * Goal 91. Weak Mutation 64: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceConstant - 1 -> 0
   * Goal 92. Weak Mutation 65: LinkedList.removeLast()Ljava/lang/Object;:137 - ReplaceComparisonOperator != -> ==
   * Goal 93. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 94. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  @Test public void test25()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.removeLast();
      // Undeclared exception!
      try { 
        linkedList0.backward();      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 26
  /*
   * 18 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - true
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.backward()V: I6 Branch 3 IF_ACMPEQ L42 - true in context: LinkedList:backward()V
   * Goal 5. LinkedList.<init>()V: Line 23
   * Goal 6. LinkedList.<init>()V: Line 24
   * Goal 7. LinkedList.<init>()V: Line 25
   * Goal 8. LinkedList.<init>()V: Line 29
   * Goal 9. LinkedList.<init>()V: Line 30
   * Goal 10. LinkedList.<init>()V: Line 31
   * Goal 11. LinkedList.backward()V: Line 42
   * Goal 12. LinkedList.backward()V: Line 49
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.backward()V
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. [METHODNOEX] LinkedList.backward()V
   * Goal 17. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 5: LinkedList.backward()V:42 - ReplaceComparisonOperator == -> !=
   */

  
  @Test public void test26()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.backward();
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 27
  /*
   * 58 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 3. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 4. LinkedList.<init>()V: root-Branch
   * Goal 5. LinkedList.forward()V: I4 Branch 1 IFNE L35 - false
   * Goal 6. LinkedList.forward()V: I8 Branch 2 IFNULL L35 - true
   * Goal 7. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 8. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - true
   * Goal 9. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 10. Branch LinkedList.forward()V: I8 Branch 2 IFNULL L35 - true in context: LinkedList:forward()V
   * Goal 11. Branch LinkedList.forward()V: I4 Branch 1 IFNE L35 - false in context: LinkedList:forward()V
   * Goal 12. Branch LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false in context: LinkedList:addFirst(Ljava/lang/Object;)V
   * Goal 13. LinkedList.<init>()V: Line 23
   * Goal 14. LinkedList.<init>()V: Line 24
   * Goal 15. LinkedList.<init>()V: Line 25
   * Goal 16. LinkedList.<init>()V: Line 29
   * Goal 17. LinkedList.<init>()V: Line 30
   * Goal 18. LinkedList.<init>()V: Line 31
   * Goal 19. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 20. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 21. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 26. LinkedList.forward()V: Line 35
   * Goal 27. LinkedList.forward()V: Line 38
   * Goal 28. LinkedList.isEmpty()Z: Line 192
   * Goal 29. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 30. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 31. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 32. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 33. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 34. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 35. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 36. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 37. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 38. [METHOD] LinkedList.<init>()V
   * Goal 39. [METHOD] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 40. [METHOD] LinkedList.forward()V
   * Goal 41. [METHODNOEX] LinkedList.<init>()V
   * Goal 42. [METHODNOEX] LinkedList.addFirst(Ljava/lang/Object;)V
   * Goal 43. [METHODNOEX] LinkedList.forward()V
   * Goal 44. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 45. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 46. Weak Mutation 3: LinkedList.forward()V:35 - ReplaceComparisonOperator != -> ==
   * Goal 47. Weak Mutation 4: LinkedList.forward()V:35 - ReplaceComparisonOperator = null -> != null
   * Goal 48. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 49. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 50. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 51. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 52. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 53. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 54. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 55. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 56. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 58. Weak Mutation 116: LinkedList.isEmpty()Z:192 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test27()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.addFirst(linkedList0);
      linkedList0.forward();
      assertFalse(linkedList0.isEmpty());
  }

  //Test case number: 28
  /*
   * 83 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 7. LinkedList.forward()V: I4 Branch 1 IFNE L35 - true
   * Goal 8. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 9. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 10. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 11. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 12. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 13. Branch LinkedList.forward()V: I4 Branch 1 IFNE L35 - true in context: LinkedList:forward()V
   * Goal 14. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 15. [Output]: LinkedList.removeFirst()Ljava/lang/Object;:NonNull
   * Goal 16. LinkedList.<init>()V: Line 23
   * Goal 17. LinkedList.<init>()V: Line 24
   * Goal 18. LinkedList.<init>()V: Line 25
   * Goal 19. LinkedList.<init>()V: Line 29
   * Goal 20. LinkedList.<init>()V: Line 30
   * Goal 21. LinkedList.<init>()V: Line 31
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 29. LinkedList.forward()V: Line 35
   * Goal 30. LinkedList.forward()V: Line 38
   * Goal 31. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 32. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 33. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 34. LinkedList.isEmpty()Z: Line 192
   * Goal 35. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 36. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 37. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 38. LinkedList.removeFirst()Ljava/lang/Object;: Line 129
   * Goal 39. LinkedList.removeFirst()Ljava/lang/Object;: Line 130
   * Goal 40. LinkedList.removeFirst()Ljava/lang/Object;: Line 131
   * Goal 41. LinkedList.removeFirst()Ljava/lang/Object;: Line 132
   * Goal 42. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 43. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 44. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 45. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 46. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 47. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 48. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 49. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 50. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 51. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 52. [METHOD] LinkedList.<init>()V
   * Goal 53. [METHOD] LinkedList.forward()V
   * Goal 54. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 55. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 56. [METHODNOEX] LinkedList.<init>()V
   * Goal 57. [METHODNOEX] LinkedList.forward()V
   * Goal 58. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 59. [METHODNOEX] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 60. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 61. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 62. Weak Mutation 3: LinkedList.forward()V:35 - ReplaceComparisonOperator != -> ==
   * Goal 63. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 64. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 65. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 66. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 67. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 68. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 69. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 70. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 71. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 72. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 73. Weak Mutation 51: LinkedList.removeFirst()Ljava/lang/Object;:130 - ReplaceVariable tmp -> tmp2
   * Goal 74. Weak Mutation 52: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp Negation
   * Goal 75. Weak Mutation 53: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp +1
   * Goal 76. Weak Mutation 54: LinkedList.removeFirst()Ljava/lang/Object;:131 - InsertUnaryOp -1
   * Goal 77. Weak Mutation 55: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceConstant - 1 -> 0
   * Goal 78. Weak Mutation 56: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> +
   * Goal 79. Weak Mutation 58: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> *
   * Goal 80. Weak Mutation 59: LinkedList.removeFirst()Ljava/lang/Object;:131 - ReplaceArithmeticOperator - -> /
   * Goal 81. Weak Mutation 60: LinkedList.removeFirst()Ljava/lang/Object;:132 - ReplaceVariable tmp2 -> tmp
   * Goal 82. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 83. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test28()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.removeFirst();
      linkedList0.forward();
      assertTrue(linkedList0.isEmpty());
  }

  //Test case number: 29
  /*
   * 18 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.removeFirst()Ljava/lang/Object;: root-Branch
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.removeFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:removeFirst()Ljava/lang/Object;
   * Goal 5. removeFirst()Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.removeFirst()Ljava/lang/Object;: Line 126
   * Goal 13. LinkedList.removeFirst()Ljava/lang/Object;: Line 127
   * Goal 14. LinkedList.removeFirst()Ljava/lang/Object;: Line 128
   * Goal 15. [METHOD] LinkedList.<init>()V
   * Goal 16. [METHOD] LinkedList.removeFirst()Ljava/lang/Object;
   * Goal 17. [METHODNOEX] LinkedList.<init>()V
   * Goal 18. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  @Test public void test29()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
      } catch(NullPointerException e) {
         ;
      }
  }

  //Test case number: 30
  /*
   * 20 covered goals:
   * Goal 1. LinkedList.<init>()V: root-Branch
   * Goal 2. LinkedList.size()I: root-Branch
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.size()I: root-Branch in context: LinkedList:size()I
   * Goal 5. [Output]: LinkedList.size()I:Zero
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.size()I: Line 187
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.size()I
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. [METHODNOEX] LinkedList.size()I
   * Goal 17. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 18. Weak Mutation 111: LinkedList.size()I:187 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 112: LinkedList.size()I:187 - InsertUnaryOp +1
   * Goal 20. Weak Mutation 113: LinkedList.size()I:187 - InsertUnaryOp -1
   */

  
  @Test public void test30()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      int int0 = linkedList0.size();
      assertEquals(0, int0);
  }

  //Test case number: 31
  /*
   * 17 covered goals:
   * Goal 1. LinkedList.resetCurrent()V: root-Branch
   * Goal 2. LinkedList.<init>()V: root-Branch
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.resetCurrent()V: root-Branch in context: LinkedList:resetCurrent()V
   * Goal 5. LinkedList.<init>()V: Line 23
   * Goal 6. LinkedList.<init>()V: Line 24
   * Goal 7. LinkedList.<init>()V: Line 25
   * Goal 8. LinkedList.<init>()V: Line 29
   * Goal 9. LinkedList.<init>()V: Line 30
   * Goal 10. LinkedList.<init>()V: Line 31
   * Goal 11. LinkedList.resetCurrent()V: Line 71
   * Goal 12. LinkedList.resetCurrent()V: Line 72
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.resetCurrent()V
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. [METHODNOEX] LinkedList.resetCurrent()V
   * Goal 17. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  
  @Test public void test31()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.resetCurrent();
      assertEquals(0, linkedList0.size());
  }

  //Test case number: 32
  /*
   * 16 covered goals:
   * Goal 1. LinkedList.currentData()Ljava/lang/Object;: root-Branch
   * Goal 2. LinkedList.<init>()V: root-Branch
   * Goal 3. Branch LinkedList.currentData()Ljava/lang/Object;: root-Branch in context: LinkedList:currentData()Ljava/lang/Object;
   * Goal 4. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 5. currentData()Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.currentData()Ljava/lang/Object;: Line 53
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.currentData()Ljava/lang/Object;
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  @Test public void test32()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      // Undeclared exception!
      try { 
        linkedList0.currentData();
        
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 33
  /*
   * 16 covered goals:
   * Goal 1. LinkedList.getFirst()Ljava/lang/Object;: root-Branch
   * Goal 2. LinkedList.<init>()V: root-Branch
   * Goal 3. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 4. Branch LinkedList.getFirst()Ljava/lang/Object;: root-Branch in context: LinkedList:getFirst()Ljava/lang/Object;
   * Goal 5. getFirst()Ljava/lang/Object;_java.lang.NullPointerException_IMPLICIT
   * Goal 6. LinkedList.<init>()V: Line 23
   * Goal 7. LinkedList.<init>()V: Line 24
   * Goal 8. LinkedList.<init>()V: Line 25
   * Goal 9. LinkedList.<init>()V: Line 29
   * Goal 10. LinkedList.<init>()V: Line 30
   * Goal 11. LinkedList.<init>()V: Line 31
   * Goal 12. LinkedList.getFirst()Ljava/lang/Object;: Line 107
   * Goal 13. [METHOD] LinkedList.<init>()V
   * Goal 14. [METHOD] LinkedList.getFirst()Ljava/lang/Object;
   * Goal 15. [METHODNOEX] LinkedList.<init>()V
   * Goal 16. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   */

  @Test public void test33()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      // Undeclared exception!
      try { 
        linkedList0.getFirst();
       
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         ;
      }
  }

  //Test case number: 34
  /*
   * 68 covered goals:
   * Goal 1. LinkedList$Node.setNext(LLinkedList$Node;)V: root-Branch
   * Goal 2. LinkedList$Node.getElement()Ljava/lang/Object;: root-Branch
   * Goal 3. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: root-Branch
   * Goal 4. LinkedList$Node.getNext()LLinkedList$Node;: root-Branch
   * Goal 5. LinkedList.<init>()V: root-Branch
   * Goal 6. LinkedList.addFirst(Ljava/lang/Object;)V: I23 Branch 5 IFNONNULL L62 - false
   * Goal 7. LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true
   * Goal 8. LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - true
   * Goal 9. LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - true
   * Goal 10. LinkedList.isEmpty()Z: I4 Branch 21 IFNONNULL L192 - false
   * Goal 11. Branch LinkedList.<init>()V: root-Branch in context: LinkedList:<init>()V
   * Goal 12. Branch LinkedList.insertBefore(Ljava/lang/Object;)V: I4 Branch 8 IFNE L88 - true in context: LinkedList:insertBefore(Ljava/lang/Object;)V
   * Goal 13. Branch LinkedList.getLast()Ljava/lang/Object;: I4 Branch 10 IFNONNULL L112 - true in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 14. Branch LinkedList.getLast()Ljava/lang/Object;: I18 Branch 11 IFNULL L117 - true in context: LinkedList:getLast()Ljava/lang/Object;
   * Goal 15. [Output]: LinkedList.getLast()Ljava/lang/Object;:NonNull
   * Goal 16. LinkedList.<init>()V: Line 23
   * Goal 17. LinkedList.<init>()V: Line 24
   * Goal 18. LinkedList.<init>()V: Line 25
   * Goal 19. LinkedList.<init>()V: Line 29
   * Goal 20. LinkedList.<init>()V: Line 30
   * Goal 21. LinkedList.<init>()V: Line 31
   * Goal 22. LinkedList.addFirst(Ljava/lang/Object;)V: Line 59
   * Goal 23. LinkedList.addFirst(Ljava/lang/Object;)V: Line 60
   * Goal 24. LinkedList.addFirst(Ljava/lang/Object;)V: Line 61
   * Goal 25. LinkedList.addFirst(Ljava/lang/Object;)V: Line 62
   * Goal 26. LinkedList.addFirst(Ljava/lang/Object;)V: Line 63
   * Goal 27. LinkedList.addFirst(Ljava/lang/Object;)V: Line 65
   * Goal 28. LinkedList.addFirst(Ljava/lang/Object;)V: Line 66
   * Goal 29. LinkedList.getLast()Ljava/lang/Object;: Line 112
   * Goal 30. LinkedList.getLast()Ljava/lang/Object;: Line 116
   * Goal 31. LinkedList.getLast()Ljava/lang/Object;: Line 117
   * Goal 32. LinkedList.getLast()Ljava/lang/Object;: Line 120
   * Goal 33. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 88
   * Goal 34. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 89
   * Goal 35. LinkedList.insertBefore(Ljava/lang/Object;)V: Line 96
   * Goal 36. LinkedList.isEmpty()Z: Line 192
   * Goal 37. LinkedList$Node.<init>(LLinkedList;)V: Line 11
   * Goal 38. LinkedList$Node.<init>(LLinkedList;)V: Line 12
   * Goal 39. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 11
   * Goal 40. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 12
   * Goal 41. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;)V: Line 14
   * Goal 42. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 11
   * Goal 43. LinkedList$Node.<init>(LLinkedList;Ljava/lang/Object;LLinkedList$Node;)V: Line 12
   * Goal 44. LinkedList$Node.getElement()Ljava/lang/Object;: Line 18
   * Goal 45. LinkedList$Node.getNext()LLinkedList$Node;: Line 17
   * Goal 46. LinkedList$Node.setNext(LLinkedList$Node;)V: Line 16
   * Goal 47. [METHOD] LinkedList.<init>()V
   * Goal 48. [METHOD] LinkedList.getLast()Ljava/lang/Object;
   * Goal 49. [METHOD] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 50. [METHODNOEX] LinkedList.<init>()V
   * Goal 51. [METHODNOEX] LinkedList.getLast()Ljava/lang/Object;
   * Goal 52. [METHODNOEX] LinkedList.insertBefore(Ljava/lang/Object;)V
   * Goal 53. Weak Mutation 1: LinkedList$Node.setNext(LLinkedList$Node;)V:16 - ReplaceVariable n -> this
   * Goal 54. Weak Mutation 2: LinkedList.<init>()V:25 - ReplaceConstant - 0 -> 1
   * Goal 55. Weak Mutation 7: LinkedList.addFirst(Ljava/lang/Object;)V:62 - ReplaceComparisonOperator != null -> = null
   * Goal 56. Weak Mutation 8: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp Negation
   * Goal 57. Weak Mutation 9: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp +1
   * Goal 58. Weak Mutation 10: LinkedList.addFirst(Ljava/lang/Object;)V:65 - InsertUnaryOp -1
   * Goal 59. Weak Mutation 11: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceConstant - 1 -> 0
   * Goal 60. Weak Mutation 12: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> %
   * Goal 61. Weak Mutation 13: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> -
   * Goal 62. Weak Mutation 14: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> *
   * Goal 63. Weak Mutation 15: LinkedList.addFirst(Ljava/lang/Object;)V:65 - ReplaceArithmeticOperator + -> /
   * Goal 64. Weak Mutation 30: LinkedList.insertBefore(Ljava/lang/Object;)V:88 - ReplaceComparisonOperator != -> ==
   * Goal 65. Weak Mutation 48: LinkedList.getLast()Ljava/lang/Object;:112 - ReplaceComparisonOperator != null -> = null
   * Goal 66. Weak Mutation 49: LinkedList.getLast()Ljava/lang/Object;:117 - ReplaceComparisonOperator = null -> != null
   * Goal 67. Weak Mutation 114: LinkedList.isEmpty()Z:192 - ReplaceComparisonOperator != null -> = null
   * Goal 68. Weak Mutation 115: LinkedList.isEmpty()Z:192 - ReplaceConstant - 1 -> 0
   */

  
  @Test public void test34()  throws Throwable  {
      LinkedList linkedList0 = new LinkedList();
      linkedList0.insertBefore(linkedList0);
      linkedList0.getLast();
      assertEquals(0, linkedList0.size());
  }
}